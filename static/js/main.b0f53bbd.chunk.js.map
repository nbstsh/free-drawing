{"version":3,"sources":["utils/firebase-init.js","config/firebase-config.js","utils/users.js","utils/points.js","utils/lines.js","components/palette/Palette.js","components/container/contaner.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","appId","auth","db","firestore","onAuthStateChanged","user","console","log","getCurrentUser","currentUser","signIn","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","signInAnonymously","abrupt","sent","stop","apply","this","arguments","getColRef","collection","uploadPoints","id","x","y","docRef","Error","pointId","doc","set","userId","uid","_x","_x2","_x3","LINE_OPTION","points","stroke","tension","lines","generateLine","Konva","Line","findLine","line","addLine","addPoints","concat","draw","useDrawing","needUpload","length","undefined","drawingLineIdRef","useRef","layerRef","_useState","useState","_useState2","slicedToArray","isDrawing","setIsDrawing","getDrawingLine","current","useEffect","handler","errorHandler","onSnapshot","querySnap","documents","docs","map","objectSpread","data","filter","err","error","onPointsSnapshot","forEach","addLineToLayer","add","onStartDrawing","uuidv4","initLine","onDrawing","e","target","getPointerPosition","_e$target$getPointerP","onFinishDrawing","Palette","_useDrawing","react_default","createElement","ReactKonva","width","window","innerWidth","height","innerHeight","onMouseDown","onTouchStart","onMouseMove","onTouchMove","onMouseUp","onTouchEnd","onMouseLeave","ref","Container","palette_Palette","App","isReady","setIsReady","className","contaner","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b0f53bbd.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport firebaseConfig from '../config/firebase-config';\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const auth = firebase.auth();\nexport const db = firebase.firestore();\n\nauth.onAuthStateChanged(user => {\n\tconsole.log({ user });\n});\n","export default {\n\tapiKey: 'AIzaSyDeVrI4qEw6LJyJpz9KyV6Us0946KFp3Vc',\n\tauthDomain: 'real-time-drawing.firebaseapp.com',\n\tdatabaseURL: 'https://real-time-drawing.firebaseio.com',\n\tprojectId: 'real-time-drawing',\n\tappId: '1:483886123352:web:9a59dd94e7430752'\n};\n","import { auth } from './firebase-init';\n\nexport const getCurrentUser = () => {\n\treturn auth.currentUser;\n};\n\nexport const signIn = async () => {\n\treturn await auth.signInAnonymously();\n};\n","import { db } from './firebase-init';\nimport { getCurrentUser } from './users';\n\nconst getColRef = () => {\n\treturn db.collection('points');\n};\n\nconst getDocRef = pointId => {\n\tconst colRef = getColRef();\n\treturn colRef.doc(pointId);\n};\n\nexport const uploadPoints = async (id, x, y) => {\n\tif (!id) throw new Error('Id must be provided.');\n\n\tconst isValidPositions = typeof x === 'number' && typeof y === 'number';\n\tif (!isValidPositions) return;\n\n\tconst user = getCurrentUser();\n\tif (!user) throw new Error('User is not logged in.');\n\n\tconst docRef = getDocRef(id);\n\tawait docRef.set({\n\t\tuserId: user.uid,\n\t\tx,\n\t\ty\n\t});\n};\n\nexport const onPointsSnapshot = (handler, errorHandler) => {\n\tconst user = getCurrentUser();\n\tif (!user) throw new Error('User is not logged in.');\n\n\treturn getColRef().onSnapshot(\n\t\tquerySnap => {\n\t\t\tconst documents = querySnap.docs\n\t\t\t\t.map(doc => ({\n\t\t\t\t\tid: doc.id,\n\t\t\t\t\t...doc.data()\n\t\t\t\t}))\n\t\t\t\t.filter(doc => doc.userId !== user.uid);\n\n\t\t\thandler(documents);\n\t\t},\n\t\terr => {\n\t\t\tconsole.error(err);\n\t\t\terrorHandler && errorHandler(err);\n\t\t}\n\t);\n};\n","import { useState, useRef, useEffect } from 'react';\nimport Konva from 'konva';\nimport uuidv4 from 'uuidv4';\nimport { uploadPoints, onPointsSnapshot } from './points';\n\nconst LINE_OPTION = {\n\tx: 0,\n\ty: 0,\n\tpoints: [],\n\tstroke: 'black',\n\ttension: 0\n};\n\nconst lines = {};\n\nconst generateLine = () => {\n\treturn new Konva.Line(LINE_OPTION);\n};\n\nconst findLine = id => {\n\tconst line = lines[id];\n\tif (!line) throw new Error('Line with given id was not found.');\n\n\treturn line;\n};\n\nconst addLine = (id, line) => {\n\tlines[id] = line;\n};\n\nconst addPoints = (id, x, y) => {\n\tconst line = findLine(id);\n\n\tconst isValidPositions = typeof x === 'number' && typeof y === 'number';\n\tif (!isValidPositions) return;\n\n\tline.points(line.points().concat([x, y]));\n\tline.draw();\n};\n\nexport const useDrawing = (needUpload = false) => {\n\tconst drawingLineIdRef = useRef(null);\n\tconst layerRef = useRef(null);\n\tconst [isDrawing, setIsDrawing] = useState(false);\n\n\tconst getDrawingLine = () => {\n\t\treturn findLine(drawingLineIdRef.current);\n\t};\n\n\tuseEffect(() => {\n\t\tif (!needUpload) return;\n\n\t\tconst handler = documents => {\n\t\t\tdocuments.forEach(({ id, x, y }) => {\n\t\t\t\tif (!lines[id]) {\n\t\t\t\t\tconst line = generateLine();\n\t\t\t\t\taddLine(id, line);\n\t\t\t\t\taddLineToLayer(line);\n\t\t\t\t}\n\n\t\t\t\taddPoints(id, x, y);\n\t\t\t});\n\t\t};\n\t\treturn onPointsSnapshot(handler);\n\t}, [needUpload]);\n\n\tconst initLine = () => {\n\t\tconst line = generateLine();\n\t\tconst id = uuidv4();\n\t\taddLine(id, line);\n\t\tdrawingLineIdRef.current = id;\n\t};\n\n\tconst addLineToLayer = line => {\n\t\tif (!layerRef.current) return;\n\t\tlayerRef.current.add(line);\n\t};\n\n\tconst onStartDrawing = () => {\n\t\tsetIsDrawing(true);\n\t\tinitLine();\n\t\taddLineToLayer(getDrawingLine());\n\t};\n\n\tconst onDrawing = e => {\n\t\tif (!isDrawing || !e.target.getPointerPosition) return;\n\t\tif (!getDrawingLine()) return;\n\n\t\tconst { x, y } = e.target.getPointerPosition();\n\t\tconst id = drawingLineIdRef.current;\n\t\taddPoints(id, x, y);\n\n\t\tif (needUpload) uploadPoints(id, x, y);\n\t};\n\n\tconst onFinishDrawing = () => {\n\t\tsetIsDrawing(false);\n\t};\n\n\treturn {\n\t\tlayerRef,\n\t\tonStartDrawing,\n\t\tonDrawing,\n\t\tonFinishDrawing\n\t};\n};\n","import React from 'react';\nimport { Stage, Layer } from 'react-konva';\n\nimport { useDrawing } from '../../utils/lines';\n\nconst Palette = () => {\n\tconst { layerRef, onStartDrawing, onDrawing, onFinishDrawing } = useDrawing(\n\t\ttrue\n\t);\n\n\treturn (\n\t\t<Stage\n\t\t\twidth={window.innerWidth}\n\t\t\theight={window.innerHeight}\n\t\t\tonMouseDown={onStartDrawing}\n\t\t\tonTouchStart={onStartDrawing}\n\t\t\tonMouseMove={onDrawing}\n\t\t\tonTouchMove={onDrawing}\n\t\t\tonMouseUp={onFinishDrawing}\n\t\t\tonTouchEnd={onFinishDrawing}\n\t\t\tonMouseLeave={onFinishDrawing}\n\t\t>\n\t\t\t<Layer ref={layerRef} />\n\t\t</Stage>\n\t);\n};\n\nexport default Palette;\n","import React from 'react';\nimport Palette from '../palette/Palette';\n\nconst Container = () => {\n\treturn (\n\t\t<div>\n\t\t\t<Palette />\n\t\t</div>\n\t);\n};\n\nexport default Container;\n","import React, { useEffect, useState } from 'react';\n\nimport './App.scss';\n\nimport Container from './components/container/contaner';\nimport { auth } from './utils/firebase-init';\nimport { signIn } from './utils/users';\n\nconst App = () => {\n\tconst [isReady, setIsReady] = useState(false);\n\n\tuseEffect(() => {\n\t\treturn auth.onAuthStateChanged(user => {\n\t\t\tif (user) {\n\t\t\t\tsetIsReady(true);\n\t\t\t} else {\n\t\t\t\tsignIn();\n\t\t\t}\n\t\t});\n\t}, []);\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t{isReady ? <Container /> : <h1>Loading .....</h1>}\n\t\t</div>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/main.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './utils/firebase-init';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}